module SIPO(clk,clr, si, po);
input clk, si,clr;
output [7:0] po;
reg [7:0] tmp;
reg [7:0] po;
always @(posedge clk)
begin
if (clr) begin
tmp<= 8'b0;
end else begin
tmp <= {tmp[6:0], si};
po = tmp;
end
end
endmodule

module SIPO_TOP(input clk, input clr, input Si, output [7:0] p);
wire slowclk;
clkdivider T1(clk,clr,slowclk);
SIPO T2(slowclk, clr,Si,p);
endmodule
module clkdivider(
    input clk,
    input clr,
    output slowclk
);
    reg [24:0] count;

    always @(posedge clk) begin
        if (clr)
            count <= 0;
        else
            count <= count + 1;
    end

    assign slowclk = count[24];
endmodule
