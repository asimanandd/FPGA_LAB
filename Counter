                                                                                              //UP AND DOWN COUNTER
module four_bit_counter(
    input clk,
    input rst,
input Control,
    output reg [3:0] q
);

    always @(posedge clk) begin
        if (rst)
            q <= 4'b0000;
        else if (Control == 0)
            q <= q + 1;
else if (Control == 1)
q <= q - 1;
else
q <= 4'b1111;
    end
endmodule




                                                                                                // CLOCK DIVIDER

module clkdivider(
    input clk,
    input rst,
    output slowclk
);
    reg [24:0] count;

    always @(posedge clk) begin
        if (rst)
            count <= 0;
        else
            count <= count + 1;
    end

    assign slowclk = count[24];
endmodule


module bcd_to_7segment (
    input [3:0] bcd,
    output reg [6:0] seg
);

    always @(*) begin
        case (bcd)
             4'b0000: seg=7'b0000001;
4'b0001: seg=7'b1001111;
4'b0010: seg=7'b0010010;
4'b0011: seg=7'b0000110;
4'b0100: seg=7'b1001100;
4'b0101: seg= 7'b0100100;
4'b0110: seg=7'b0100000;
4'b0111: seg=7'b0001111;
4'b1000: seg=7'b0000000;
4'b1001: seg=7'b0000100;
4'b1010: seg=7'b0001000;
4'b1011: seg=7'b1100000;
4'b1100: seg=7'b0110001;
4'b1101: seg=7'b1000010;
4'b1110: seg=7'b0110000;
4'b1111: seg=7'b0111000;
default:seg=7'b1111111;
        endcase
    end
endmodule

module main_counter_sevenseg(
    input Clock,
    input Reset,
input Control,
    output [6:0] HEX
);
    wire [3:0] Out;
    wire Slow_Clk_Out;

    clkdivider clk_divider_inst (
        .clk(Clock),
        .rst(Reset),
        .slowclk(Slow_Clk_Out)
    );

    four_bit_counter counter_inst (
        .clk(Slow_Clk_Out),
        .rst(Reset),
 .Control(Control),
        .q(Out)
    );

    bcd_to_7segment bcd_decoder (
        .bcd(Out),
        .seg(HEX)
    );
endmodule
